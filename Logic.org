* Sudoku Experiment
** Generate a sudoku board

|---+---+---+---+---+---+---+---+---|
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---+---+---+---+---+---+---+---+---|
| 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 1 |
|---+---+---+---+---+---+---+---+---|
| 3 | 4 | 5 | 6 | 7 | 8 | 9 | 1 | 2 |
|---+---+---+---+---+---+---+---+---|
| 4 | 5 | 6 | 7 | 8 | 9 | 1 | 2 | 3 |
|---+---+---+---+---+---+---+---+---|
| 5 | 6 | 7 | 8 | 9 | 1 | 2 | 3 | 4 |
|---+---+---+---+---+---+---+---+---|
| 6 | 7 | 8 | 9 | 1 | 2 | 3 | 4 | 5 |
|---+---+---+---+---+---+---+---+---|
| 7 | 8 | 9 | 1 | 2 | 3 | 4 | 5 | 6 |
|---+---+---+---+---+---+---+---+---|
| 8 | 9 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
|---+---+---+---+---+---+---+---+---|
| 9 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
|---+---+---+---+---+---+---+---+---|

Algorithm to create a sudoku board

1. Create a seed row with numbers 1 through 9
2. Randomize the elements in the array and swap them around
3. Copy the array and each time shifting the elements of the array to the right
4. Repeat the copy 8 times
6. Remove some random elements from the matrix
5. Now swap some of the rows and you would end up with a sudoku board


** Solve the sudoku board
Algorithm to solve the sudoku board

1. List out all the empty cell locations
2. Take the first empty cell and try some values
3. if one of the value matches, store it in a stack and move to the next cell
4. if the next cell value does not meet criteria and options are exhausted,
come back to the stack modify the previous result and try again
5. Repeat the step 4 until the either all the options for the first result get exhausted
or until all the solutions are obtained.

Recursive Function for checking solution

inputs: stack, condition to check for valid solution, next cell value
1. Evaluate cell value
2. is cell value less than 10
3. if step 3 is yes then ... else ...
4. move to next cell
5. move to prev cell result and evaluate
